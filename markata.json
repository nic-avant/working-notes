{"config": {"glob_patterns": ["pages/**/*.md"], "hooks": ["markata.plugins.publish_source", "markata.plugins.prevnext", "default"], "disabled_hooks": ["markata.plugins.seo"], "markdown_extensions": [], "default_cache_expire": 1209600, "output_dir": "markout", "assets_dir": "static", "version": 0, "edit": false, "url": "http://localhost:8008", "description": "Blog posts about stuff I work on", "title": "My Working Notes", "rss_description": "Blog posts about stuff I work on", "author_name": "Nicholas Payne", "author_email": "nic.payne@avant.com", "site_name": "My Working Notes", "theme_color": "#322D39", "background_color": "#B73CF6", "start_url": "/", "short_name": "My Working Notes", "display": "minimal-ui", "icon": "icon.png", "lang": "en", "nav": {"Home": "/", "All Posts": "/archive"}, "prevnext": {"strategy": "first", "prevnext_color_text": "white", "prevnext_color_text_light": "black", "prevnext_color_angle": "white", "prevnext_color_angle_light": "black"}, "auto_description": {"description": {"len": 160}, "long_description": {"len": 250}, "super_description": {"len": 500}, "cache_expire": 1209600, "config_key": "auto_description"}, "auto_publish": {"filters": {"til": "templateKey=='til' and date<=today and post.get('published', False)== 'True'"}}, "head": {"text": "<title>{{ title|e }}</title>", "meta": [{"name": "twitter:title", "content": "{{ title|e }}"}, {"name": "og:title", "content": "{{ title|e }}"}, {"name": "description", "content": "{{ description|e }}"}, {"name": "og:description", "content": "{{ description|e }}"}, {"name": "twitter:description", "content": "{{ description|e }}"}, {"name": "og:type", "content": "article"}, {"name": "og:url", "content": "{{ config.url }}/{{ slug }}/"}, {"name": "og:image", "content": "{{ config.url }}/{{ slug }}.jpg"}, {"name": "og:image:width", "content": 1200}, {"name": "og:image:height", "content": 600}, {"name": "twitter:creator", "content": "@"}, {"name": "twitter:card", "content": "summary_large_image"}, {"name": "og:author", "content": "Nicholas Payne"}, {"name": "og:site_name", "content": "My Working Notes"}, {"name": "og:author_email", "content": "nic.payne@avant.com"}, {"name": "generator", "content": "markata {{ __version__ }}"}, {"name": "theme-color", "content": "#322D39"}], "link": [{"href": "{{ config.url }}/{{ slug + '/' if slug != 'index' else '' }}", "rel": "canonical"}]}, "feeds": {"archive": {"filter": "date<=today and post.get('published', False)", "sort": "date", "reverse": "True", "template": "/home/runner/.local/share/hatch/env/virtual/my-working-notes/l-vDM0LE/my-working-notes/lib/python3.10/site-packages/markata/plugins/default_post_template.html"}, "all": {"filter": "True", "sort": "date", "reverse": "True", "template": "/home/runner/.local/share/hatch/env/virtual/my-working-notes/l-vDM0LE/my-working-notes/lib/python3.10/site-packages/markata/plugins/default_post_template.html"}, "published": {"filter": "date<=today and post.get('published', False)", "sort": "date", "reverse": "True", "template": "/home/runner/.local/share/hatch/env/virtual/my-working-notes/l-vDM0LE/my-working-notes/lib/python3.10/site-packages/markata/plugins/default_post_template.html"}, "draft": {"filter": "date>today or not post.get('published', False)", "sort": "date", "reverse": "True", "template": "/home/runner/.local/share/hatch/env/virtual/my-working-notes/l-vDM0LE/my-working-notes/lib/python3.10/site-packages/markata/plugins/default_post_template.html"}}}, "articles": [{"cover": "", "title": "Creating Your Feeds", "tags": ["home", "meta"], "status": "draft", "templateKey": "", "path": "pages/creating-feeds.md", "description": "Feeds are a powerful feature of  Now create an instance of markata. Now you should be able to list out the articles, for this site it will be something like. No", "content": "Feeds are a powerful feature of `markata` that allow you to build feeds of\nposts from the same arguments that get passed into `Markata.map`, all within\n`markata.toml`.  You can create feeds for things like your published articles,\narticles that contain a certain tag, articles that are stored in a certain\nfolder, articles posted before or after a certain date (likely today).\n\n## Load up ipython\n\n_or python or a script that you run, whatever your fancy_\n\nNow create an instance of markata.\n\n``` python\nfrom markata import Markta\nm = Markata()\n```\n\n## Let's poke through our articles\n\nNow you should be able to list out the articles, for this site it will be something like.\n\n``` python\nm.articles\n# [\n#     <frontmatter.Post object at 0x7f609831b0a0>,\n#     <frontmatter.Post object at 0x7f6098318b80>,\n#     <frontmatter.Post object at 0x7f609831a890>,\n#     <frontmatter.Post object at 0x7f609831ab30>,\n#     <frontmatter.Post object at 0x7f609831aa70>,\n#     <frontmatter.Post object at 0x7f609831b760>\n# ]\n```\n\nNow let's say you want the title for all the articles, you could do this with a list comp.\n\n``` python\n[post['title'] for post in markata.articles]\n# ['Building the Site', 'Home Page', 'Loading Markata into Ipython', 'Jinja Variables', 'Your Own Style', '404']\n```\n\nNow if you wanted to filter for only published posts, you can filter by the boolean variable `published`.\n\n``` python\n[post['title'] for post in markata.articles if published]\n# ['Building the Site', 'Home Page', 'Loading Markata into Ipython', 'Jinja Variables', 'Your Own Style']\n```\n\nAnd a little more arbitrary, and slightly more complex filter.\n\n``` python\n[post['title'] for post in markata.articles if \"y\" in post['path']]\n# ['Loading Markata into Ipython', 'Your Own Style']\n```\n\n## Using map\n\nThe same results can be achieved with the `Markata.map` function.  Again let's\nstart by getting the title.\n\n``` python\n[post['title'] for post in markata.articles if published]\nmarkata.map('title')\n# ['Building the Site', 'Home Page', 'Loading Markata into Ipython', 'Jinja Variables', 'Your Own Style', '404']\n```\n\nThen we can add the filter for `published` posts back in.\n\n``` python\nmarkata.map('title', filter='published')\n# ['Building the Site', 'Home Page', 'Loading Markata into Ipython', 'Jinja Variables', 'Your Own Style', '404']\n```\n\nAnd the more arbitrary filter looking for \"y\" in the article's path.\n\n``` python\nmarkata.map('title', filter='\"y\" in post[\"path\"]')\n# ['Loading Markata into Ipython', 'Your Own Style']\n```\n\nSince each article is unpacked into the map function, path is also directly\navailable to the filter, so we don't necessarily need to reach for the `post`.\n\n``` python\nmarkata.map('title', filter='\"y\" in path')\n# ['Loading Markata into Ipython', 'Your Own Style']\n```\n\nLastely we can also **sort on date**, by adding a sort argument.\n\n``` python\nmarkata.map('title', filter='published', sort='date')\n# ['Building the Site', 'Home Page', 'Loading Markata into Ipython', 'Jinja Variables', 'Your Own Style', '404']\n```\n\n## What does this have to do with feeds.\n\nMarkata can make a feed page, displaying each post in the returned list inside\nof an html feed.  It does this by unpacking the arguments from the feeds config\ninto the map function.\n\n``` python\n[markata.feeds.published]\n# creates a feed at /published\nfilter=\"date<=today and post.get('published', False)\"\nsort=\"date\"\n```\n<div class='prevnext'>\n\n    <style type='text/css'>\n\n    :root {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"light\"] {\n      --prevnext-color-text: #1f2022;\n      --prevnext-color-angle: #ffeb00;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"dark\"] {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    .prevnext {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n      align-items: flex-start;\n    }\n    .prevnext a {\n      display: flex;\n      align-items: center;\n      width: 100%;\n      text-decoration: none;\n    }\n    a.next {\n      justify-content: flex-end;\n    }\n    .prevnext a:hover {\n      background: #00000006;\n    }\n    .prevnext-subtitle {\n      color: var(--prevnext-color-text);\n      filter: brightness(var(--prevnext-subtitle-brightness));\n      font-size: .8rem;\n    }\n    .prevnext-title {\n      color: var(--prevnext-color-text);\n      font-size: 1rem;\n    }\n    .prevnext-text {\n      max-width: 30vw;\n    }\n    </style>\n    \n    <a class='prev' href='/your-own-style'>\n    \n\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M13.5 8.25L9.75 12L13.5 15.75\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"> </path>\n        </svg>\n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>prev</p>\n            <p class='prevnext-title'>Your Own Style</p>\n        </div>\n    </a>\n    \n    <a class='next' href='/ipython'>\n    \n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>next</p>\n            <p class='prevnext-title'>Loading Markata into Ipython</p>\n        </div>\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10.5 15.75L14.25 12L10.5 8.25\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n        </svg>\n    </a>\n  </div>", "date": "2022-09-05", "published": true, "edit_link": "https://github.com/edit/main/pages/creating-feeds.md", "today": "2025-06-06", "now": "2025-06-06 18:34:08.208214", "datetime": "2022-09-05 00:00:00+00:00", "slug": "creating-feeds", "output_html": "markout/creating-feeds/index.html", "long_description": "Feeds are a powerful feature of  Now create an instance of markata. Now you should be able to list out the articles, for this site it will be something like. Now let Now if you wanted to filter for only published posts, you can filter by the boolean ", "super_description": "Feeds are a powerful feature of  Now create an instance of markata. Now you should be able to list out the articles, for this site it will be something like. Now let Now if you wanted to filter for only published posts, you can filter by the boolean variable  And a little more arbitrary, and slightly more complex filter. The same results can be achieved with the  Then we can add the filter for  And the more arbitrary filter looking for  Since each article is unpacked into the map function, path ", "jinja": false, "prevnext": "PrevNext(prev=<frontmatter.Post object at 0x7f972abbf5e0>, next=<frontmatter.Post object at 0x7f972abbe950>)"}, {"cover": "", "title": "Building the Site", "tags": ["home", "meta"], "status": "draft", "templateKey": "", "path": "pages/building-the-site.md", "description": "The first thing you will want to do is make sure that you can build your site and see it in the browser.  Markata builds static websites using a python based cl", "content": "The first thing you will want to do is make sure that you can build your site and see it in the browser.  Markata builds static websites using a python based cli that can be setup with very few steps once you have python 3.7+ installed.  You will have to become at least a little bit comfortable running some commands from the command line to run the build.\n\n\n## Installation\n\nThis site comes with a `pyproject.toml` that can be used by hatch to\nautomatically take care of your virtual environments for you.\n\n``` bash\npip install hatch\n```\n\n## Building the site, Leveraging Hatch\n\nHatch comes with a nice system for creating scirpts that you can run in your\nmanaged virtual environment with less effort of managing.  You can create any\nthat you want in your own `pyproject.toml`, but these come with the template\nout of the box.\n\n``` bash\n# builds the site\nhatch run build\n\n# clean's cache and output directory\nhatch run clean\n\n# clean's cache and output directory, and builds\nhatch run clean-build\n\n# runs a development server, watches for changes and rebuilds.\nhatch run tui\n\n# run's clean then start's the tui\nhatch run clean-tui\n\n# just serve markout at localhost:8000\nhatch run serve\n```\n\nOnce you have the site up and running, open your browser to\n[http://localhost:8000](http://localhost:8000).\n\n> Note,if you already have something running on port `8000` hatch run serve will give\n> you an error, but hatch run tui will automatically choose the next available port.\n> Make sure you open the right link in your browser.\n\n## Building the site, vanilla\n\nYou will want to install everything in a virtual environment to prevent\nyourself from clogging up your system python, or trying to run two versions of\n`markata` for different projects.\n\n``` bash\n# using hatch for the virtual environment\nhatch shell\n\n# using venv\npython -m venv .venv\n. ./.venv/bin/activate\npip install -e .\n```\n\nOnce you have your virtual environment created and activated you can use the\nmarkata cli plugin to build your site.\n\n``` bash\n# builds the site\nmarkata build\n\n# clean's cache and output directory\nmarkata clean\n\n# runs a development server, watches for changes and rebuilds.\nmarkata tui\n```\n\n## repl or script\n\nIt's also possible to run the build from a repl like ipython or a python\nscript.\n\n``` python\nfrom markata import Markata\n\nm = Markata()\nm.run()\n```\n<div class='prevnext'>\n\n    <style type='text/css'>\n\n    :root {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"light\"] {\n      --prevnext-color-text: #1f2022;\n      --prevnext-color-angle: #ffeb00;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"dark\"] {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    .prevnext {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n      align-items: flex-start;\n    }\n    .prevnext a {\n      display: flex;\n      align-items: center;\n      width: 100%;\n      text-decoration: none;\n    }\n    a.next {\n      justify-content: flex-end;\n    }\n    .prevnext a:hover {\n      background: #00000006;\n    }\n    .prevnext-subtitle {\n      color: var(--prevnext-color-text);\n      filter: brightness(var(--prevnext-subtitle-brightness));\n      font-size: .8rem;\n    }\n    .prevnext-title {\n      color: var(--prevnext-color-text);\n      font-size: 1rem;\n    }\n    .prevnext-text {\n      max-width: 30vw;\n    }\n    </style>\n    \n    <a class='prev' href='/jinja'>\n    \n\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M13.5 8.25L9.75 12L13.5 15.75\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"> </path>\n        </svg>\n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>prev</p>\n            <p class='prevnext-title'>Jinja Variables</p>\n        </div>\n    </a>\n    \n    <a class='next' href='/serverless-databricks-privatelink'>\n    \n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>next</p>\n            <p class='prevnext-title'>Serverless Databricks with PrivateLink</p>\n        </div>\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10.5 15.75L14.25 12L10.5 8.25\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n        </svg>\n    </a>\n  </div>", "date": "2022-09-02", "published": true, "edit_link": "https://github.com/edit/main/pages/building-the-site.md", "today": "2025-06-06", "now": "2025-06-06 18:34:08.208224", "datetime": "2022-09-02 00:00:00+00:00", "slug": "building-the-site", "output_html": "markout/building-the-site/index.html", "long_description": "The first thing you will want to do is make sure that you can build your site and see it in the browser.  Markata builds static websites using a python based cli that can be setup with very few steps once you have python 3.7+ installed.  You will hav", "super_description": "The first thing you will want to do is make sure that you can build your site and see it in the browser.  Markata builds static websites using a python based cli that can be setup with very few steps once you have python 3.7+ installed.  You will have to become at least a little bit comfortable running some commands from the command line to run the build. This site comes with a  Hatch comes with a nice system for creating scirpts that you can run in your Once you have the site up and running, op", "jinja": false, "prevnext": "PrevNext(prev=<frontmatter.Post object at 0x7f972abbe800>, next=<frontmatter.Post object at 0x7f972abbee00>)"}, {"cover": "", "title": "Whoops that page was not found", "tags": [], "status": "draft", "templateKey": "", "path": "pages/404.md", "description": "404, looks like we can't find the page you are looking for", "content": "404, looks like we can't find the page you are looking for.  Try one of these\npages.\n\n<ul>\n\n    <li><a href=\"serverless-databricks-privatelink\">Serverless Databricks with PrivateLink</a></li>\n\n    <li><a href=\"index\">Markata Blog Starter</a></li>\n\n    <li><a href=\"ipython\">Loading Markata into Ipython</a></li>\n\n    <li><a href=\"jinja\">Jinja Variables</a></li>\n\n    <li><a href=\"your-own-style\">Your Own Style</a></li>\n\n    <li><a href=\"building-the-site\">Building the Site</a></li>\n\n    <li><a href=\"creating-feeds\">Creating Your Feeds</a></li>\n\n</ul>\n<div class='prevnext'>\n\n    <style type='text/css'>\n\n    :root {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"light\"] {\n      --prevnext-color-text: #1f2022;\n      --prevnext-color-angle: #ffeb00;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"dark\"] {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    .prevnext {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n      align-items: flex-start;\n    }\n    .prevnext a {\n      display: flex;\n      align-items: center;\n      width: 100%;\n      text-decoration: none;\n    }\n    a.next {\n      justify-content: flex-end;\n    }\n    .prevnext a:hover {\n      background: #00000006;\n    }\n    .prevnext-subtitle {\n      color: var(--prevnext-color-text);\n      filter: brightness(var(--prevnext-subtitle-brightness));\n      font-size: .8rem;\n    }\n    .prevnext-title {\n      color: var(--prevnext-color-text);\n      font-size: 1rem;\n    }\n    .prevnext-text {\n      max-width: 30vw;\n    }\n    </style>\n    \n    <a class='prev' href='/'>\n    \n\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M13.5 8.25L9.75 12L13.5 15.75\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"> </path>\n        </svg>\n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>prev</p>\n            <p class='prevnext-title'>Markata Blog Starter</p>\n        </div>\n    </a>\n    \n    <a class='next' href='/your-own-style'>\n    \n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>next</p>\n            <p class='prevnext-title'>Your Own Style</p>\n        </div>\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10.5 15.75L14.25 12L10.5 8.25\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n        </svg>\n    </a>\n  </div>", "date": "2022-09-01", "published": false, "output_html": "markout/404.html", "edit_link": "https://github.com/edit/main/pages/404.md", "today": "2025-06-06", "now": "2025-06-06 18:34:08.208230", "datetime": "2022-09-01 00:00:00+00:00", "slug": "404", "long_description": "404, looks like we can", "super_description": "404, looks like we can", "jinja": false, "prevnext": "PrevNext(prev=<frontmatter.Post object at 0x7f972abbf430>, next=<frontmatter.Post object at 0x7f972abbf5e0>)"}, {"cover": "", "title": "Your Own Style", "tags": ["home", "meta"], "status": "draft", "templateKey": "", "path": "pages/your-own-style.md", "description": "Once you have the site up and running it The easiest way to make the site your own is to define custom colors in the You can override the existing css to tweak ", "content": "Once you have the site up and running it's important to make it your own.  You\nare free to keep the default style if you really like.  Markata is completely\ncustomizable, you can specify some theme colors to your liking or complely\neject out of markata's built in template and completely use your own.\n\n\n## Picking your own colors\n\nThe easiest way to make the site your own is to define custom colors in the\n`markata.toml` configuration file.  There is more information about theming\nthis way in the [docs/colortheme](https://markata.dev/color-theme/)\n\n```toml\n[markata]\ncolor_bg = '#1f2022'\ncolor_bg_code = '#1f2022'\ncolor_text = '#eefbfe'\ncolor_link = '#47cbff' \ncolor_accent = '#e1bd00c9'\noverlay_brightness = '.85'\n\ncolor_bg_light = '#eefbfe'\ncolor_bg_code_light = '#eefbfe'\ncolor_text_light = '#1f2022'\ncolor_link_light = '#47cbff' \ncolor_accent_light = '#ffeb00'\noverlay_brightness_light = '.95'\n```\n\n## Adding your own css/overriding css - site wide\n\nYou can override the existing css to tweak how the site looks.  Again this is\ndone in the `markata.toml` configuration.  To add any sort of plain text\nentries in the `<head>` of your site, you can specify a `[[markata.head.text]]`\nblock with an entry for `value` with the text you want to appear in the head.\n\n``` toml\n[[markata.head.text]]\nvalue = \"\"\"\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Roboto&display=swap\" rel=\"stylesheet\">\n\n<style>html{font-family: 'Roboto', sans-serif;}</style>\n\"\"\"\n```\n\n!!! danger\n    You can end up with a blank page if you do not close any tags here.\n\n## Using your own template\n\nIf you want complete customizability of both the style and structure of the\nsite, you can use your own template.  To get started copy the default template\nfrom markata into your project.\n\n``` bash\ncurl https://raw.githubusercontent.com/WaylonWalker/markata/main/markata/plugins/default_post_template.html > pages/templates/post_template.html\n```\n\nThen update your post_template in `markata.toml` to point to your template.\n\n``` toml\n[markata]\npost_template = \"pages/templates/post_template.html\"\n```\n\nNow you can make structural changes to your template and see the results in your build.\n\n## Changing your favicon\n\nYour favicon should be kept in your `assets` directory, which is `./static` by\ndefault.  You can name the icon what you want, `icon.png` is the default, but\nyou will have to change your icon config in your `markata.toml` to use a\ndifferent value.\n\n``` toml\n[markata]\nassets_dir = \"static\"\nicon = \"icon.png\"\n```\n<div class='prevnext'>\n\n    <style type='text/css'>\n\n    :root {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"light\"] {\n      --prevnext-color-text: #1f2022;\n      --prevnext-color-angle: #ffeb00;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"dark\"] {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    .prevnext {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n      align-items: flex-start;\n    }\n    .prevnext a {\n      display: flex;\n      align-items: center;\n      width: 100%;\n      text-decoration: none;\n    }\n    a.next {\n      justify-content: flex-end;\n    }\n    .prevnext a:hover {\n      background: #00000006;\n    }\n    .prevnext-subtitle {\n      color: var(--prevnext-color-text);\n      filter: brightness(var(--prevnext-subtitle-brightness));\n      font-size: .8rem;\n    }\n    .prevnext-title {\n      color: var(--prevnext-color-text);\n      font-size: 1rem;\n    }\n    .prevnext-text {\n      max-width: 30vw;\n    }\n    </style>\n    \n    <a class='prev' href='/404'>\n    \n\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M13.5 8.25L9.75 12L13.5 15.75\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"> </path>\n        </svg>\n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>prev</p>\n            <p class='prevnext-title'>Whoops that page was not found</p>\n        </div>\n    </a>\n    \n    <a class='next' href='/creating-feeds'>\n    \n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>next</p>\n            <p class='prevnext-title'>Creating Your Feeds</p>\n        </div>\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10.5 15.75L14.25 12L10.5 8.25\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n        </svg>\n    </a>\n  </div>", "date": "2022-09-05", "published": true, "edit_link": "https://github.com/edit/main/pages/your-own-style.md", "today": "2025-06-06", "now": "2025-06-06 18:34:08.208236", "datetime": "2022-09-05 00:00:00+00:00", "slug": "your-own-style", "output_html": "markout/your-own-style/index.html", "long_description": "Once you have the site up and running it The easiest way to make the site your own is to define custom colors in the You can override the existing css to tweak how the site looks.  Again this is ! If you want complete customizability of both the styl", "super_description": "Once you have the site up and running it The easiest way to make the site your own is to define custom colors in the You can override the existing css to tweak how the site looks.  Again this is ! If you want complete customizability of both the style and structure of the Then update your post Now you can make structural changes to your template and see the results in your build. Your favicon should be kept in your ", "jinja": false, "prevnext": "PrevNext(prev=<frontmatter.Post object at 0x7f972abbed40>, next=<frontmatter.Post object at 0x7f972abbeb90>)"}, {"cover": "", "title": "Jinja Variables", "tags": ["home", "meta"], "status": "draft", "templateKey": "", "path": "pages/jinja.md", "description": "Markata uses python The veresion of markata used to build the site. ({{  A python datetime object. ({{date.today()}}) All variables from your post frontmatter l", "content": "Markata uses python's powerful jinja2 templating library for its templates as well as giving authors the ability to inject variables right into their markdown posts. This post contains quite a few examples of using jinja variables, compare it's output in the browser to the raw markdown file in `pages/jinja.md`.\n\n### `__version__`\n\nThe veresion of markata used to build the site. (0.5.5)\n\n### date\n\nA python datetime object. (2025-06-06) \n\n### Frontmatter\n\nAll variables from your post frontmatter like `title` (Jinja Variables) and `tags` (['home', 'meta']). If you are not familiar with frontmatter it's the content at the top\nof a markdown file between `---`.  Markata uses the most common type of\nfrontmatter, `yaml`.\n\n```md\n---\n# this is the frontmatter\ndate: 2022-09-29 13:26:33\ntitle: Home Page\n\n---\n\n## the post\n\nmarkdown gets written after the frontmatter\n\n```\n\n##  markata\n\nThe last variable exposed is an instance of `markata.Markata` called `markata`.\nThis allows you to reference all of your other posts in very interesting ways.\nsuch as getting the latest post -> [Your Own Style](/your-own-style)\n\nYou can also map over posts to get more.\n\n## Last Three Posts\n\n\n*  [Your Own Style](your-own-style)\n*  [Creating Your Feeds](creating-feeds)\n*  [Loading Markata into Ipython](ipython)\n\n## Last Three Python posts\n\n\n*  [Your Own Style](your-own-style)\n*  [Creating Your Feeds](creating-feeds)\n*  [Loading Markata into Ipython](ipython)\n<div class='prevnext'>\n\n    <style type='text/css'>\n\n    :root {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"light\"] {\n      --prevnext-color-text: #1f2022;\n      --prevnext-color-angle: #ffeb00;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"dark\"] {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    .prevnext {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n      align-items: flex-start;\n    }\n    .prevnext a {\n      display: flex;\n      align-items: center;\n      width: 100%;\n      text-decoration: none;\n    }\n    a.next {\n      justify-content: flex-end;\n    }\n    .prevnext a:hover {\n      background: #00000006;\n    }\n    .prevnext-subtitle {\n      color: var(--prevnext-color-text);\n      filter: brightness(var(--prevnext-subtitle-brightness));\n      font-size: .8rem;\n    }\n    .prevnext-title {\n      color: var(--prevnext-color-text);\n      font-size: 1rem;\n    }\n    .prevnext-text {\n      max-width: 30vw;\n    }\n    </style>\n    \n    <a class='prev' href='/ipython'>\n    \n\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M13.5 8.25L9.75 12L13.5 15.75\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"> </path>\n        </svg>\n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>prev</p>\n            <p class='prevnext-title'>Loading Markata into Ipython</p>\n        </div>\n    </a>\n    \n    <a class='next' href='/building-the-site'>\n    \n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>next</p>\n            <p class='prevnext-title'>Building the Site</p>\n        </div>\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10.5 15.75L14.25 12L10.5 8.25\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n        </svg>\n    </a>\n  </div>", "date": "2022-09-03", "published": true, "config_overrides": {"head": {"text": "<style>\n    ul {\n        list-style-type: None;\n    }\n    li a {\n        background: rgba(255,255,255,.1);\n        margin: .2rem;\n    }\n</style>\n"}}, "edit_link": "https://github.com/edit/main/pages/jinja.md", "today": "2025-06-06", "now": "2025-06-06 18:34:08.208241", "datetime": "2022-09-03 00:00:00+00:00", "slug": "jinja", "output_html": "markout/jinja/index.html", "long_description": "Markata uses python The veresion of markata used to build the site. ({{  A python datetime object. ({{date.today()}}) All variables from your post frontmatter like  The last variable exposed is an instance of  You can also map over posts to get more.", "super_description": "Markata uses python The veresion of markata used to build the site. ({{  A python datetime object. ({{date.today()}}) All variables from your post frontmatter like  The last variable exposed is an instance of  You can also map over posts to get more. {% for post in markata.map( [ {% for post in markata.map( [", "jinja": false, "prevnext": "PrevNext(prev=<frontmatter.Post object at 0x7f972abbe950>, next=<frontmatter.Post object at 0x7f972abbf5b0>)"}, {"cover": "", "title": "Loading Markata into Ipython", "tags": ["home", "meta"], "status": "draft", "templateKey": "", "path": "pages/ipython.md", "description": "Setting up the ipython extension is completely optional, and not You can add markata to your I don If you have the extension active an instance will automatical", "content": "## Ipython extension\n\nSetting up the ipython extension is completely optional, and not\nrequired, but there for pure convenience.\n\nYou can add markata to your\n`~/.ipython/profile_default/ipython_config.py` as reccomended by\nipython with the snippet below.\n\n``` python\nc.InteractiveShellApp.extensions.append('markata')\n```\n\nI don't prefer this because I also have ipython installed in\nenvironments without markata installed, so I do the following in\nmy personal config so that it does not error when missing markata.\n\n``` python\nimport importlib\n\n\ndef activate_extension(extension):\n    try:\n        mod = importlib.import_module(extension)\n        getattr(mod, \"load_ipython_extension\")\n        c.InteractiveShellApp.extensions.append(extension)\n    except ModuleNotFoundError:\n        \"extension is not installed\"\n    except AttributeError:\n        \"extension does not have a 'load_ipython_extension' function\"\n\n\nextensions = [\"markata\", ]\nfor extension in extensions:\n    activate_extension(extension)\n```\n\n## Loading a markata instance\n\nIf you have the extension active an instance will automatically be created and\navailable as `m` as well as `markata`.\n\n``` python\nm\n# or\nmarkata\n```\n\nIf you opt out of setting up the extension or use something other than ipython\nyou can make an instance yourself.\n\n``` python\nfrom markata import Markata\n\nm = Markata()\n```\n\n## Looking through articles\n\nOnce you have an instance of `markata` in memory you can look through your\narticles using the list of articles, or the map function.\n\n\n``` python\n# get a list of frontmatter.Post objects\nm.articles\n\n# leverage the map function to filter\nm.map('post', filter='\"python\" in tags')\nm.map('post', filter='date>today')\n```\n\n## Map\n\nThe map function \n\n`func`: What to return as the item in the list. This can ve a single attribute\nlike `title`, or `tags`, or the full post `post`.  It can also be any string of\npython like `'date>today'` or something more complicated like\n`f'''\"{markata.config['url']}/\" + slug'''`\n\n``` python\nm.map('post')\nm.map('title')\nm.map('slug')\n\nm.map('\"python\" in tags')\nm.map(f'''\"{markata.config['url']}/\" + slug''')\n```\n\n`filter`: Filter is also just a string of python similar to the `func`\nargument, but it filters based on the boolean value of the result.  You can do\nthings like look for published posts `published`, check for posts posted before\ntoday `date<today`, or articles with certain tags `\"python\" in tags`.\n\n``` python\nm.map(filter='published')\nm.map(filter='date<today')\nm.map(filter='\"python\" in tags')\n```\n\n`sort`: Sort will try to sort your articles based on the value returned.\n\n``` python\nm.map(sort='title')\nm.map(sort='date')\nm.map(sort='order')\n```\n\n`reverse`: Reverse the results returned by map with the `reverse` flag.\n\n``` python\nm.map(reverse=False)\nm.map(reverse=True)\n```\n<div class='prevnext'>\n\n    <style type='text/css'>\n\n    :root {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"light\"] {\n      --prevnext-color-text: #1f2022;\n      --prevnext-color-angle: #ffeb00;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"dark\"] {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    .prevnext {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n      align-items: flex-start;\n    }\n    .prevnext a {\n      display: flex;\n      align-items: center;\n      width: 100%;\n      text-decoration: none;\n    }\n    a.next {\n      justify-content: flex-end;\n    }\n    .prevnext a:hover {\n      background: #00000006;\n    }\n    .prevnext-subtitle {\n      color: var(--prevnext-color-text);\n      filter: brightness(var(--prevnext-subtitle-brightness));\n      font-size: .8rem;\n    }\n    .prevnext-title {\n      color: var(--prevnext-color-text);\n      font-size: 1rem;\n    }\n    .prevnext-text {\n      max-width: 30vw;\n    }\n    </style>\n    \n    <a class='prev' href='/creating-feeds'>\n    \n\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M13.5 8.25L9.75 12L13.5 15.75\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"> </path>\n        </svg>\n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>prev</p>\n            <p class='prevnext-title'>Creating Your Feeds</p>\n        </div>\n    </a>\n    \n    <a class='next' href='/jinja'>\n    \n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>next</p>\n            <p class='prevnext-title'>Jinja Variables</p>\n        </div>\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10.5 15.75L14.25 12L10.5 8.25\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n        </svg>\n    </a>\n  </div>", "date": "2022-09-04", "published": true, "edit_link": "https://github.com/edit/main/pages/ipython.md", "today": "2025-06-06", "now": "2025-06-06 18:34:08.208245", "datetime": "2022-09-04 00:00:00+00:00", "slug": "ipython", "output_html": "markout/ipython/index.html", "long_description": "Setting up the ipython extension is completely optional, and not You can add markata to your I don If you have the extension active an instance will automatically be created and If you opt out of setting up the extension or use something other than i", "super_description": "Setting up the ipython extension is completely optional, and not You can add markata to your I don If you have the extension active an instance will automatically be created and If you opt out of setting up the extension or use something other than ipython Once you have an instance of  The map function func filter sort reverse", "jinja": false, "prevnext": "PrevNext(prev=<frontmatter.Post object at 0x7f972abbeb90>, next=<frontmatter.Post object at 0x7f972abbe800>)"}, {"cover": "", "title": "Markata Blog Starter", "tags": ["home", "meta"], "status": "draft", "templateKey": "", "path": "pages/index.md", "description": "Welcome to the Markata starter blog, this is your home page to edit and make Here are some pages to help get you started. Feel free to delete them and and {% fo", "content": "Welcome to the Markata starter blog, this is your home page to edit and make\nyour own.  Edit this page in `pages/index.md`.\n\n## Some helpful pages\n\nHere are some pages to help get you started. Feel free to delete them and and\nmake this site your own.\n\n\n!!! note \"[Markata Blog Starter](index)\"\n    Welcome to the Markata starter blog, this is your home page to edit and make Here are some pages to help get you started. Feel free to delete them and and {% fo...\n\n!!! note \"[Building the Site](building-the-site)\"\n    The first thing you will want to do is make sure that you can build your site and see it in the browser.  Markata builds static websites using a python based cl...\n\n!!! note \"[Jinja Variables](jinja)\"\n    Markata uses python The veresion of markata used to build the site. ({{  A python datetime object. ({{date.today()}}) All variables from your post frontmatter l...\n\n!!! note \"[Loading Markata into Ipython](ipython)\"\n    Setting up the ipython extension is completely optional, and not You can add markata to your I don If you have the extension active an instance will automatical...\n\n!!! note \"[Creating Your Feeds](creating-feeds)\"\n    Feeds are a powerful feature of  Now create an instance of markata. Now you should be able to list out the articles, for this site it will be something like. No...\n\n!!! note \"[Your Own Style](your-own-style)\"\n    Once you have the site up and running it The easiest way to make the site your own is to define custom colors in the You can override the existing css to tweak ...\n\n<div class='prevnext'>\n\n    <style type='text/css'>\n\n    :root {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"light\"] {\n      --prevnext-color-text: #1f2022;\n      --prevnext-color-angle: #ffeb00;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"dark\"] {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    .prevnext {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n      align-items: flex-start;\n    }\n    .prevnext a {\n      display: flex;\n      align-items: center;\n      width: 100%;\n      text-decoration: none;\n    }\n    a.next {\n      justify-content: flex-end;\n    }\n    .prevnext a:hover {\n      background: #00000006;\n    }\n    .prevnext-subtitle {\n      color: var(--prevnext-color-text);\n      filter: brightness(var(--prevnext-subtitle-brightness));\n      font-size: .8rem;\n    }\n    .prevnext-title {\n      color: var(--prevnext-color-text);\n      font-size: 1rem;\n    }\n    .prevnext-text {\n      max-width: 30vw;\n    }\n    </style>\n    \n    <a class='prev' href='/serverless-databricks-privatelink'>\n    \n\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M13.5 8.25L9.75 12L13.5 15.75\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"> </path>\n        </svg>\n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>prev</p>\n            <p class='prevnext-title'>Serverless Databricks with PrivateLink</p>\n        </div>\n    </a>\n    \n    <a class='next' href='/your-own-style'>\n    \n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>next</p>\n            <p class='prevnext-title'>Your Own Style</p>\n        </div>\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10.5 15.75L14.25 12L10.5 8.25\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n        </svg>\n    </a>\n  </div>", "date": "2022-09-01", "published": true, "edit_link": "https://github.com/edit/main/pages/index.md", "today": "2025-06-06", "now": "2025-06-06 18:34:08.208250", "datetime": "2022-09-01 00:00:00+00:00", "slug": "index", "output_html": "markout/index.html", "long_description": "Welcome to the Markata starter blog, this is your home page to edit and make Here are some pages to help get you started. Feel free to delete them and and {% for post in markata.map(", "super_description": "Welcome to the Markata starter blog, this is your home page to edit and make Here are some pages to help get you started. Feel free to delete them and and {% for post in markata.map(", "jinja": false, "prevnext": "PrevNext(prev=<frontmatter.Post object at 0x7f972abbee00>, next=<frontmatter.Post object at 0x7f972abbf5e0>)"}, {"cover": "", "title": "Serverless Databricks with PrivateLink", "tags": ["terraform", "aws", "spacelift"], "status": "draft", "templateKey": "", "path": "pages/jira/serverless-databricks-privatelink.md", "description": "We want to query some databases in our AWS account from our serverless We will do as much as possible with Terraform. aws_vpc_endpoint_service aws_lb aws_securi", "content": "# Introduction\n\nWe want to query some databases in our AWS account from our serverless\nDatabricks compute... The issue is that native PrivateLink support isn't\navailable for serverless Databricks and the feature they have in preview\nrequires some special setup.\n\n## Resources\n\nWe will do as much as possible with Terraform.\nLet's catalog the resources we'll need right away...\n\n1. `aws_vpc_endpoint_service` - this is the PrivateLink endpoint service that will be used to connect to the Databricks workspace\n2. `aws_lb` - a network load balancer\n3. `aws_security_group` - security group for the load balancer\n4. `aws_lb_target_group` - this is basically the groupings of IPs of the database endpoints we eventually want to be querying\n5. `aws_lb_target_group_attachment` - an explicit resource for attaching the target groups to a load balancer\n6. `aws_lb_listener` - a listener listens for traffic on a port and takes action, in our case it'll just forward the traffic\n7. `aws_security_group_rule` - need to set ingress/egress rules for the load balancer to allow traffic to flow\n\nOne special thing we'll need, since we want to specify our endopints by DNS name, is a way to resolve that DNS to a set of IPs because target groups for NLBs in AWS cannot take VPC endpoints as their targets, it has to be IP addresses, so in terraform we will use hashicorp's `dns` provider for this\n\n```terraform\nterraform {\n  required_providers {\n    dns = {\n      source = \"hashicorp/dns\"\n    }\n  }\n}\n\ndata \"dns_a_record_set\" \"target_lookup\" {\n  for_each = local.target_configs\n  host     = each.key\n}\n```\n\n## Limitations\n\nThere are some primary limitations to consider as we step through the plan...\n\n1. Databricks limits workspaces to 1 Network Connectivity Configuration (NCC)\n2. Any given NCC is limited to 3 PrivateLink endpoint configurations\n\n# The Plans\n\n1. Each database makes its own PL endpoint\n\n- immediately we run into limitations where a workspace would be limited to access 3 databases at any given time\n\n2. Provision 1 PrivateLink endpoint per account and route to every database in some clever way\n\n- what if we want to query from databases across more than 3 accounts?\n\n3. Provision 1 PrivateLink endpoint in a primary account, and then cleverly route traffic relying on Transit Gateway to permit cross-account/VPC traffic\n\n## 3's the Winner\n\nIn order to meet this need/ask in a general way, option 3 is the only way to go\n\n# Implementation\n\n## Requirements First\n\nWe basically want a subnet router fronted by a PrivateLink endpoint.\n\nUsers should be able to expose a database endpoint in any AWS account\nsufficiently connected via Transit Gateway, to this PrivateLink and any of the\nconsumers on the other end of the PrivateLink relationship.\n\nSo given a database endpoint and port we want to configure networking through\nthe PrivateLink endpoint... This diagram helps it make sense I think\n\n![cross account privatelink router](https://dropper.wayl.one/api/file/5330675c-bdb6-41c2-a021-4871b3e4f809.png)\n\n## Details of Implementation\n\n> As this is more of a report rather than live-tweeting my experience I will\n> spare every single issue but at the end I'll list some things I learned along\n> the way\n\nI listed the resources above but let's do an overview of the key components of the module...\n\nFirst let's see the variables we want:\n\n```terraform\nvariable \"vpc_id\" {\n  type        = string\n  description = \"The ID of the VPC where resources will be created\"\n}\n\nvariable \"subnet_ids\" {\n  type        = list(string)\n  description = \"List of subnet IDs where the Network Load Balancer will be created\"\n}\n\nvariable \"tags\" {\n  type        = map(string)\n  description = \"Tags to be applied to all resources\"\n  default     = {}\n}\n\nvariable \"service_name\" {\n  type    = string\n  default = \"privatelink-router\"\n}\n\nvariable \"target_endpoints\" {\n  type = list(object({\n    id   = string\n    port = number\n    name = string\n  }))\n  description = \"List of target endpoints with hostname and port\"\n  default     = []\n}\n\nvariable \"service_config\" {\n  type = object({\n    target_type = optional(string, \"ip\")\n    protocol    = optional(string, \"TCP\")\n    base_port   = optional(number, 10000)\n    # NOTE: I wrote my module so that service_config.targets gets merged with\n    #target_endpoints as we plan to supply target_endpoints in environment\n    #specific var files\n    targets = list(object({\n      id          = string\n      target_port = number\n      protocol    = optional(string)\n    }))\n  })\n  description = \"Configuration for the service endpoints. Each target can specify its own target_port (destination port) and optional protocol override.\"\n\n  default = { targets = [] }\n}\n\nvariable \"health_check_config\" {\n  type = object({\n    port                = optional(string, \"traffic-port\")\n    path                = optional(string)\n    protocol            = optional(string)\n    healthy_threshold   = optional(number, 3)\n    unhealthy_threshold = optional(number, 3)\n    interval            = optional(number, 30)\n    timeout             = optional(number, 10)\n  })\n  description = \"Configuration for target group health checks\"\n  default = {\n    port                = \"traffic-port\"\n    path                = null\n    protocol            = null\n    healthy_threshold   = 3\n    unhealthy_threshold = 3\n    interval            = 30\n    timeout             = 10\n  }\n}\n\n```\n\nNow get the `locals` and `data` into your head:\n\n```terraform\nlocals {\n  nlb_name = \"${var.service_name}-nlb\"\n\n  # Transform target_endpoints into service_config targets format\n  service_targets = [\n    for endpoint in var.target_endpoints : {\n      id          = endpoint.id\n      name        = endpoint.name\n      target_port = endpoint.port\n      protocol    = null # Using default protocol from service_config\n    }\n  ]\n\n  # Combine the transformed targets with service_config\n  combined_service_config = merge(var.service_config, {\n    targets = concat(var.service_config.targets, local.service_targets)\n  })\n\n  # Base port for service endpoints\n  base_port = 10000\n\n  # Process target configurations\n  target_configs = {\n    for idx, target in local.combined_service_config.targets : target.id => {\n      name        = try(target.name, replace(target.id, \"/[^a-zA-Z0-9-]/\", \"-\"))\n      target_port = target.target_port\n      source_port = local.base_port + idx\n      protocol    = coalesce(target.protocol, local.combined_service_config.protocol, \"TCP\")\n    }\n  }\n\n  # Resolve target IPs using DNS lookup\n  resolved_ips = {\n    for id, config in local.target_configs : id => distinct(\n      data.dns_a_record_set.target_lookup[id].addrs\n    )\n  }\n\n  # Security group rules\n  security_group_rules = {\n    ingress_rules = [\n        {\n          from_port   = local.base_port\n          to_port     = max(local.base_port, local.base_port + length(local.target_configs) - 1)\n          protocol    = \"tcp\"\n          cidr_blocks = [\"10.0.0.0/8\"]\n          description = \"Allow inbound traffic to service endpoints\"\n        }\n      ]\n    egress_rules = [\n        {\n          from_port   = 0\n          to_port     = 65535\n          protocol    = \"-1\"\n          cidr_blocks = [\"10.0.0.0/8\"]\n          description = \"Allow outbound traffic to internal network\"\n        }\n      ]\n}\n\n\n# DNS Lookup for Target Group endpoints\ndata \"dns_a_record_set\" \"target_lookup\" {\n  for_each = local.target_configs\n  host     = each.key\n}\n```\n\nAnd with those in mind we can take a look at the resources - with basic terraform familiarity I think it's not too much to take in\n\n```terraform\n# Security Group for NLB\nresource \"aws_security_group\" \"nlb_ingress\" {\n  name        = \"${local.nlb_name}-ingress\"\n  description = \"Security Group for NLB Ingress\"\n  vpc_id      = data.aws_vpc.selected.id\n}\n\n# Network Load Balancer\nresource \"aws_lb\" \"lb\" {\n  name               = local.nlb_name\n  internal           = true\n  load_balancer_type = \"network\"\n  subnets            = var.subnet_ids\n  security_groups    = [aws_security_group.nlb_ingress.id]\n}\n\n# Target groups for NLB\nresource \"aws_lb_target_group\" \"target\" {\n  for_each = local.target_configs\n\n  name        = \"${local.nlb_name}-tg-${each.value.name}\"\n  port        = each.value.target_port\n  protocol    = each.value.protocol\n  target_type = var.service_config.target_type\n  vpc_id      = data.aws_vpc.selected.id\n}\n\n# Attach resolved IPs to target groups\nresource \"aws_lb_target_group_attachment\" \"tga\" {\n  for_each = {\n    for pair in flatten([\n      for target_id, ips in local.resolved_ips : [\n        for ip in ips : {\n          key       = \"${target_id}-${ip}\"\n          target_id = target_id\n          ip        = ip\n        }\n      ]\n    ]) : pair.key => pair\n  }\n\n  target_group_arn = aws_lb_target_group.target[each.value.target_id].arn\n  target_id        = each.value.ip\n  port             = local.target_configs[each.value.target_id].target_port\n}\n\n# NLB Listeners\nresource \"aws_lb_listener\" \"listener\" {\n  for_each = local.target_configs\n\n  load_balancer_arn = aws_lb.lb.arn\n  port              = each.value.source_port\n  protocol          = each.value.protocol\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = aws_lb_target_group.target[each.key].arn\n  }\n}\n\nresource \"aws_vpc_endpoint_service\" \"privatelink\" {\n  acceptance_required = true\n  allowed_principals = [\"arn:aws:iam::565502421330:role/private-connectivity-role-us-east-2\"]\n  network_load_balancer_arns = [aws_lb.lb.arn]\n}\n\n# Security Group Rules\nresource \"aws_security_group_rule\" \"nlb_ingress\" {\n  security_group_id = aws_security_group.nlb_ingress.id\n  type              = \"ingress\"\n  from_port         = local.security_group_rules.ingress_rules[0].from_port\n  to_port           = local.security_group_rules.ingress_rules[0].to_port\n  protocol          = local.security_group_rules.ingress_rules[0].protocol\n  cidr_blocks       = local.security_group_rules.ingress_rules[0].cidr_blocks\n  description       = local.security_group_rules.ingress_rules[0].description\n}\n\nresource \"aws_security_group_rule\" \"nlb_egress\" {\n  security_group_id = aws_security_group.nlb_ingress.id\n  type              = \"egress\"\n  from_port         = local.security_group_rules.egress_rules[0].from_port\n  to_port           = local.security_group_rules.egress_rules[0].to_port\n  protocol          = local.security_group_rules.egress_rules[0].protocol\n  cidr_blocks       = local.security_group_rules.egress_rules[0].cidr_blocks\n  description       = local.security_group_rules.egress_rules[0].description\n}\n```\n\nThe PrivateLink endpoint is created at the VPC level, and then is supported by\na Network Load Balancer (NLB). The NLB is created with a security group that\nhas an ID which we'll need later. In the meantime, the NLB has associated\nListeners - they listen on specific ports and take action, like forwarding TCP\ntraffic to a Target Group. In this case, we construct the Target Groups for\neach database endpoint a user wants to expose by performing a DNS lookup, and\nthen creating a Target Group Attachment for each of the resolved IPs for the\nTarget Group that we're creating for the given database.\n\nSo request comes into the PrivateLink endpoint on a specific port, the listener\non the NLB forwrads the traffic to the appropriate Target Group whose\nattachments are the correct IPs of the database\n\nThe final thing on our end is to ensure that the security group rules for the\ndatabase endpoint are configured to allow traffic from the NLB - which we can\ndo by adding the security group id to any existing rules. We can do this in the\nconsole or if the desired target endpoint is created with a terrform module we\ncan update the terraform module and even hard code the security group id of the\nNLBa\n\n# FIN\n\nWith that we now have a working PrivateLink endpoint that we can use to expose\nany number of databases to Databricks Serverless without being hamstrung by the\nlimitations of 3 endpoints per NCC and 1 NCC per workspace!\n\n# Nuggets\n\n- Coding with AI is helpful if you use the tool well, I tried to use it for generating terraform boilerplate in this project, and a few times I let it go off the rails and ultimately I had to backup... nothing super new here, but another confirmation that AI is tricky to work with if you want to produce valuable work\n- PrivateLink is a very interesting piece of tech... I thought it was more like Wireguard but it's not P2P, it's more like a private tunnel that you can do with on either end what you want. In fact, this implementation turned our endpoint and NLB basically into a subnet router\n<div class='prevnext'>\n\n    <style type='text/css'>\n\n    :root {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"light\"] {\n      --prevnext-color-text: #1f2022;\n      --prevnext-color-angle: #ffeb00;\n      --prevnext-subtitle-brightness: 3;\n    }\n    [data-theme=\"dark\"] {\n      --prevnext-color-text: #eefbfe;\n      --prevnext-color-angle: #e1bd00c9;\n      --prevnext-subtitle-brightness: 3;\n    }\n    .prevnext {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n      align-items: flex-start;\n    }\n    .prevnext a {\n      display: flex;\n      align-items: center;\n      width: 100%;\n      text-decoration: none;\n    }\n    a.next {\n      justify-content: flex-end;\n    }\n    .prevnext a:hover {\n      background: #00000006;\n    }\n    .prevnext-subtitle {\n      color: var(--prevnext-color-text);\n      filter: brightness(var(--prevnext-subtitle-brightness));\n      font-size: .8rem;\n    }\n    .prevnext-title {\n      color: var(--prevnext-color-text);\n      font-size: 1rem;\n    }\n    .prevnext-text {\n      max-width: 30vw;\n    }\n    </style>\n    \n    <a class='prev' href='/building-the-site'>\n    \n\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M13.5 8.25L9.75 12L13.5 15.75\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"> </path>\n        </svg>\n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>prev</p>\n            <p class='prevnext-title'>Building the Site</p>\n        </div>\n    </a>\n    \n    <a class='next' href='/'>\n    \n        <div class='prevnext-text'>\n            <p class='prevnext-subtitle'>next</p>\n            <p class='prevnext-title'>Markata Blog Starter</p>\n        </div>\n        <svg width=\"50px\" height=\"50px\" viewbox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10.5 15.75L14.25 12L10.5 8.25\" stroke=\"var(--prevnext-color-angle)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n        </svg>\n    </a>\n  </div>", "date": "2022-09-01", "published": true, "edit_link": "https://github.com/edit/main/pages/jira/serverless-databricks-privatelink.md", "today": "2025-06-06", "now": "2025-06-06 18:34:08.208255", "datetime": "2022-09-01 00:00:00+00:00", "slug": "serverless-databricks-privatelink", "output_html": "markout/serverless-databricks-privatelink/index.html", "long_description": "We want to query some databases in our AWS account from our serverless We will do as much as possible with Terraform. aws_vpc_endpoint_service aws_lb aws_security_group aws_lb_target_group aws_lb_target_group_attachment aws_lb_listener aws_security_g", "super_description": "We want to query some databases in our AWS account from our serverless We will do as much as possible with Terraform. aws_vpc_endpoint_service aws_lb aws_security_group aws_lb_target_group aws_lb_target_group_attachment aws_lb_listener aws_security_group_rule One special thing we There are some primary limitations to consider as we step through the plan... Databricks limits workspaces to 1 Network Connectivity Configuration (NCC) Any given NCC is limited to 3 PrivateLink endpoint configurations ", "jinja": false, "prevnext": "PrevNext(prev=<frontmatter.Post object at 0x7f972abbf5b0>, next=<frontmatter.Post object at 0x7f972abbf430>)"}]}